import { app, BrowserWindow, dialog, ipcMain } from 'electron';
import { readFile } from 'fs';
import { ast } from './types';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
let compUnit: ast;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup'))
    app.quit();

const createWindow = (): void => {
    const mainWindow = new BrowserWindow({
        height: 600,
        width: 800,
        webPreferences: {
            preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY
        }
    });

    mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

		console.log(process.argv);
};

const setup = (): void => {
    ipcMain.handle('dialog', (_, method, params) => {
        return dialog[method](params)
    });

		if (process.argv.length > 2) {
			compUnit = JSON.parse(process.argv[2]);
		}

    ipcMain.handle('getAST', () => compUnit);

    createWindow();
};


// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
app.on('ready', setup);


app.on('window-all-closed', () => {
    if (process.platform !== 'darwin')
        app.quit();
});

app.on('activate', () => {
    if (BrowserWindow.getAllWindows().length === 0)
        createWindow();
});
